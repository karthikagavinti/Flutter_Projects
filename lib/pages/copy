import 'package:flutter/material.dart';

class MiddlePage extends StatelessWidget {
  const MiddlePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: true,
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Stack(
              children: [
                Container(
                  height: 320,
                  width: double.infinity,
                  decoration: BoxDecoration(
                    color: Colors.grey[300],
                    // boxShadow: [
                    //   BoxShadow(
                    //     color: Colors.black.withOpacity(0.2),
                    //     spreadRadius: 0,
                    //     blurRadius: 10,
                    //   //  offset: Offset(0, 5), // Shadow position below
                    //   ),
                    //   BoxShadow(
                    //     color: Colors.black.withOpacity(0.2),
                    //     spreadRadius: 0,
                    //     blurRadius: 10,
                    //     //offset: Offset(0, -5), // Shadow position above
                    //   ),
                    // ],
                  ),
                ),
                // Positioned(
                //   top: 5,
                //   left: 5,
                //   right: 5,
                //   bottom: 5,
                //   child: Container(
                //     height: 290,
                //     width: double.infinity,
                //     color: Colors.grey[300],
                //   ),
                // ),
              ],
            ),
            SizedBox(
              height: 16,
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            "Please fill in the details",
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 24,
                            ),
                          ),
                          Text(
                            "PO",
                            style: TextStyle(
                              color: Colors.grey,
                              fontSize: 24,
                            ),
                          ),
                        ],
                      ),
                      Spacer(),
                      Align(
                        alignment: Alignment.centerRight,
                        child: ElevatedButton(
                          onPressed: () {
                            // Handle verification button press
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Color(0xFFF5082A),
                            padding: EdgeInsets.symmetric(
                              vertical: 16,
                            ),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                            //  elevation: 3,
                          ),
                          child: Text(
                            'Edit',
                            style: TextStyle(
                              fontSize: 20,
                              color: Colors.white,
                              fontFamily: 'Lato',
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 8),
                  Column(
                    children: [
                      Container(
                        height: 56, // Set a consistent height
                        child: TextField(
                          // controller: controller, // This is the controller for managing the text input
                          //  keyboardType: keyboardType, // Specifies the keyboard type (e.g., text, number)
                          decoration: InputDecoration(
                            hintText: "118289",
                            hintStyle: TextStyle(
                              fontSize: 20,
                            ), // Placeholder text when the field is empty
                            contentPadding: EdgeInsets.symmetric(
                                horizontal:
                                    16), // Padding inside the input field
                            fillColor: Colors.grey[200], // Light gray color
                            filled: true,
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(
                                  8), // Rounded border with a radius of 8
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 12),
                  Text(
                    "Date",
                    style: TextStyle(
                      color: Colors.black54,
                      fontSize: 24,
                    ),
                  ),
                  SizedBox(height: 8),
                  Column(
                    children: [
                      Container(
                        height: 50, // Set a consistent height
                        child: TextField(
                          // controller: controller, // This is the controller for managing the text input
                          //  keyboardType: keyboardType, // Specifies the keyboard type (e.g., text, number)
                          decoration: InputDecoration(
                            hintText: "05-12-2024",
                            hintStyle: TextStyle(
                              fontSize: 20,
                            ),
                            suffixIcon: Icon(Icons
                                .calendar_month_outlined), // Placeholder text when the field is empty
                            contentPadding: EdgeInsets.symmetric(
                                horizontal:
                                    16), // Padding inside the input field
                            fillColor: Colors.grey[200], // Light gray color
                            filled: true,
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(
                                  8), // Rounded border with a radius of 8
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 16),
                  Text(
                    "Contact",
                    style: TextStyle(
                      color: Colors.black54,
                      fontSize: 24,
                    ),
                  ),
                  SizedBox(height: 8),
                  Column(
                    children: [
                      Container(
                        height: 50, // Set a consistent height
                        child: TextField(
                          // controller: controller, // This is the controller for managing the text input
                          //  keyboardType: keyboardType, // Specifies the keyboard type (e.g., text, number)
                          decoration: InputDecoration(
                            hintText: "(809) 098-1 087",
                            hintStyle: TextStyle(
                              fontSize: 20,
                            ),
                            // Padding inside the input field
                            fillColor: Colors.grey[200], // Light gray color
                            filled: true,
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(
                                  8), // Rounded border with a radius of 8
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 16),
                  Text(
                    "Address",
                    style: TextStyle(
                      color: Colors.black54,
                      fontSize: 24,
                    ),
                  ),
                  SizedBox(height: 8),
                  Column(
                    children: [
                      Container(
                        height: 130, // Set a consistent height
                        child: TextField(
                          maxLines: null, // Allow for multi-line input
                          expands: true, // Allow the TextField to expand
                          decoration: InputDecoration(
                            hintText: "loren",
                            hintStyle: TextStyle(
                              fontSize: 20,
                            ),
                            // Padding inside the input field
                            fillColor: Colors.grey[200], // Light gray color
                            filled: true,
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(
                                  8), // Rounded border with a radius of 8
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

void main() {
  runApp(MaterialApp(
    home: MiddlePage(),
  ));
}

========================================



     // const Spacer(),
        // Align(
        //   alignment: Alignment.centerRight,
        //   child: _buildGradientButton(),
        // ),






  // Widget _buildGradientButton() {
  //   return Container(
  //     decoration: BoxDecoration(
  //       gradient: LinearGradient(
  //         begin: Alignment.topCenter,
  //         end: Alignment.bottomCenter,
  //         colors: [
  //           Color(0xFFFD4552), // The color #FD4552 in hexadecimal
  //           Color(0xFFF5082A), // The color #F5082A in hexadecimal
  //         ],

  //       ),
  //       borderRadius: BorderRadius.circular(6),
  //     ),
  //     child: ElevatedButton(
  //       onPressed: () {
  //         // Navigate to another page or perform action
  //       },
  //       style: ElevatedButton.styleFrom(
  //         backgroundColor: Colors.transparent,
  //         shadowColor: Colors.transparent,
  //         padding: EdgeInsets.symmetric(vertical: 16),
  //         shape: RoundedRectangleBorder(
  //           borderRadius: BorderRadius.circular(6),
  //         ),
  //         elevation: 3,
  //       ),
  //       child: Text(
  //         'Edit',
  //         style: TextStyle(
  //           fontSize: 18,
  //           color: Colors.white,
  //           fontFamily: 'Lato',
  //         ),
  //       ),
  //     ),
  //   );
  // }




===========================                             nextpage==
import 'package:flutter/material.dart';
import 'package:flutter_pdfview/flutter_pdfview.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter/services.dart' show ByteData, rootBundle;
import 'dart:io';

class NextPage extends StatefulWidget {
  const NextPage({Key? key}) : super(key: key);

  @override
  _NextPageState createState() => _NextPageState();
}

class _NextPageState extends State<NextPage> {
  late Future<String> _pdfPath;

  @override
  void initState() {
    super.initState();
    _pdfPath = _loadPDF();
  }

  Future<String> _loadPDF() async {
    final ByteData data = await rootBundle.load('lib/assets/1-purchase order sal011742.pdf');
    final Directory tempDir = await getTemporaryDirectory();
    final File tempFile = File('${tempDir.path}/sample.pdf');
    await tempFile.writeAsBytes(data.buffer.asUint8List(), flush: true);
    return tempFile.path;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: FutureBuilder<String>(
        future: _pdfPath,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Error loading PDF'));
          } else {
            return PDFView(
              filePath: snapshot.data!,
              enableSwipe: true,
              swipeHorizontal: true,
              autoSpacing: false,
              pageFling: false,
              onError: (error) {
                print(error.toString());
              },
              onRender: (_pages) {
                print('Document rendered with $_pages pages');
              },
              onViewCreated: (PDFViewController pdfViewController) {
                print('PDF view created');
              },
            );
          }
        },
      ),   );
  }
}
      //       bottomNavigationBar: BottomNavigationBar(backgroundColor: Colors.red,
      //   items: [
      //     BottomNavigationBarItem(
      //       icon: Icon(Icons.view_array),
      //       label: 'View',backgroundColor: Colors.black
      //     ),
      //     BottomNavigationBarItem(
      //       icon: Icon(Icons.edit),
      //       label: 'Edit',backgroundColor: Colors.black
      //     ),
      //     BottomNavigationBarItem(
      //       icon: Icon(Icons.share),
      //       label: 'Share',backgroundColor: Colors.black
      //     ),
      //     BottomNavigationBarItem(
      //       icon: Icon(Icons.search),
      //       label: 'Search',backgroundColor: Colors.black
      //     ),
      //     BottomNavigationBarItem(
      //       icon: Icon(Icons.settings),
      //       label: 'Settings',backgroundColor: Colors.black
      //     ),
      //   ],
      //   onTap: (index) {
      //     switch (index) {
      //       // case 0:
      //       //   _viewThumbnails();
      //       //   break;
      //       // case 1:
      //       //   _editText();
      //       //   break;
      //       // // case 2:
      //       // //   _sharePDF();
      //       // //   break;
      //       // case 3:
      //       //   _searchText();
      //       //   break;
      //       // case 4:
      //       //   _setViewerPreferences();
      //       //   break;
      //     }
      //   },
      // ),
 
===============================
import 'package:flutter/material.dart';
import 'package:flutter_pdfview/flutter_pdfview.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter/services.dart' show ByteData, rootBundle;
// import 'package:share/share.dart';
import 'dart:io';

class NextPage extends StatefulWidget {
  const NextPage({Key? key}) : super(key: key);

  @override
  _NextPageState createState() => _NextPageState();
}

class _NextPageState extends State<NextPage> {
  late Future<String> _pdfPath;

  String _searchText = '';

  @override
  void initState() {
    super.initState();
    _pdfPath = _loadPDF();
  }

  Future<String> _loadPDF() async {
    try {
      final ByteData data = await rootBundle.load('lib/assets/1-purchase order sal011742.pdf');
      final Directory tempDir = await getTemporaryDirectory();
      final File tempFile = File('${tempDir.path}/sample.pdf');
      await tempFile.writeAsBytes(data.buffer.asUint8List(), flush: true);
      return tempFile.path;
    } catch (e) {
      throw Exception('Error loading PDF: $e');
    }
  }

  void _viewThumbnails() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => ThumbnailsPage(pdfPath: _pdfPath)),
    );
  }

void _editText() {
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
        title: Text(
          'Edit Text',
          style: TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.bold,
            color: Colors.blueAccent,
          ),
        ),
        content: Padding(
          padding: const EdgeInsets.all(8.0),
          child: TextField(
            decoration: InputDecoration(
              hintText: "Edit text here",
              hintStyle: TextStyle(color: Colors.grey),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(10),
              ),
              focusedBorder: OutlineInputBorder(
                borderSide: BorderSide(color: Colors.blueAccent, width: 2.0),
                borderRadius: BorderRadius.circular(10),
              ),
            ),
          ),
        ),
        actions: [
          TextButton(
            style: TextButton.styleFrom(
              // primary: Colors.white,
              backgroundColor: Colors.blueAccent,
              padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),
              ),
            ),
            child: Text(
              'Save',
              style: TextStyle(fontSize: 18),
            ),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
        ],
      );
    },
  );
}
  void _sharePDF() async {
    try {
      // final pdfPath = await _pdfPath;
      // Share.shareFiles([pdfPath], text: 'Here is a PDF for you.');
    } catch (e) {
      print('Error sharing PDF: $e');
    }
  }


  void _setViewerPreferences() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Viewer Preferences'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('Zoom Level'),
              Slider(
                value: 1.0,
                min: 1.0,
                max: 3.0,
                divisions: 10,
                label: 'Zoom',
                onChanged: (value) {
                  // _pdfViewController?.setZoom(value);
                },
              ),
            ],
          ),
          actions: [
            TextButton(
              child: Text('Close'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('PDF Viewer'),
        actions: [
          IconButton(
            icon: Icon(Icons.search),
            onPressed: (){},
          ),
        ],
      ),
      body: FutureBuilder<String>(
        future: _pdfPath,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Error loading PDF'));
          } else {
            return PDFView(
              filePath: snapshot.data!,
              enableSwipe: true,
              swipeHorizontal: true,
              autoSpacing: false,
              pageFling: false,
              onError: (error) {
                print('Error loading PDF: $error');
              },
              onRender: (_pages) {
                print('Document rendered with $_pages pages');
              },
              onViewCreated: (PDFViewController pdfViewController) {
                // _pdfViewController = pdfViewController;
                print('PDF view created');
              },
            );
          }
        },
      ),
      bottomNavigationBar: BottomNavigationBar(
        backgroundColor: Colors.red,
        items:const  [
          BottomNavigationBarItem(
            icon: Icon(Icons.view_array),
            label: 'View',
            backgroundColor: Colors.black,
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.edit),
            label: 'Edit',
            backgroundColor: Colors.black,
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.share),
            label: 'Share',
            backgroundColor: Colors.black,
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.search),
            label: 'Search',
            backgroundColor: Colors.black,
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings),
            label: 'Settings',
            backgroundColor: Colors.black,
          ),
        ],
        onTap: (index) {
          switch (index) {
            case 0:
              _viewThumbnails();
              break;
            case 1:
              _editText();
              break;
            case 2:
              _sharePDF();
              break;
            case 3:
              _searchText;
              break;
            case 4:
              _setViewerPreferences();
              break;
          }
        },
      ),
    );
  }
}

class ThumbnailsPage extends StatelessWidget {
  final Future<String> pdfPath;

  const ThumbnailsPage({Key? key, required this.pdfPath}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Thumbnails')),
      body: FutureBuilder<String>(
        future: pdfPath,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Error loading PDF'));
          } else {
            // Placeholder for displaying thumbnails
            return Center(child: Text('Display Thumbnails Here'));
          }
        },
      ),
    );
  }
}
=================================================================================================================
import 'package:flutter/material.dart';

class MainPage extends StatelessWidget {
  final VoidCallback onRefresh; // Define the named parameter here

  const MainPage({Key? key, required this.onRefresh}) : super(key: key); // Ensure it's defined in the constructor

  @override
  Widget build(BuildContext context) {
    return Center(
      child: ElevatedButton(
        onPressed: () {
          // Trigger refresh action
          onRefresh();
        },
        child: Text('Main Page'),
      ),
    );
  }
}

class PdfEditing extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Text('PDF Editing Page'),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  late PageController _pageController;
  int _currentIndex = 0;

  @override
  void initState() {
    super.initState();
    _pageController = PageController(initialPage: _currentIndex);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Home Screen'),
      ),
      body: PageView(
        controller: _pageController,
        onPageChanged: (index) {
          setState(() {
            _currentIndex = index;
          });
        },
        children: [
          MainPage(
            onRefresh: () {
              _pageController.jumpToPage(1); // Navigate to PdfEditing page
            },
          ),
          PdfEditing(),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }
}

void main() {
  runApp(MaterialApp(
    home: HomeScreen(),
  ));
}
=================================appbar controllor
  appBar: currentIndex == 0
          ? null
          : AppBar

==============================================
// import 'package:doxie/edit_page.dart';
import 'package:doxie/edit_page.dart';
import 'package:flutter/material.dart';
import 'package:flutter_pdfview/flutter_pdfview.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter/services.dart' show ByteData, rootBundle;
import 'package:permission_handler/permission_handler.dart';
import 'dart:io';

class NextPage extends StatefulWidget {
  const NextPage({super.key});

  @override
  _NextPageState createState() => _NextPageState();
}

class _NextPageState extends State<NextPage> {
  late Future<String> _pdfPath;

  @override
  void initState() {
    super.initState();
    _pdfPath = _loadPDF();
  }

  Future<void> requestPermissions() async {
    if (await Permission.storage.request().isGranted) {
      // Permissions are granted, continue with your task
    } else {
      // Handle the case when permissions are not granted
    }
  }

  Future<String> _loadPDF() async {
    final ByteData data =
        await rootBundle.load('lib/assets/2-invoice for accouting.PDF');
    final Directory tempDir = await getTemporaryDirectory();
    final File tempFile = File('${tempDir.path}/sample.pdf');
    await tempFile.writeAsBytes(data.buffer.asUint8List(), flush: true);
    return tempFile.path;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            FutureBuilder<void>(
              future: requestPermissions(), // Request permissions
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.done) {
                  return FutureBuilder<String>(
                    future: _pdfPath,
                    builder: (context, snapshot) {
                      if (snapshot.connectionState == ConnectionState.waiting) {
                        return Container(
                          height: 320,
                          child: Center(child: CircularProgressIndicator()),
                        );
                      } else if (snapshot.hasError ||
                          !snapshot.hasData ||
                          snapshot.data!.isEmpty) {
                        print('Error loading PDF: ${snapshot.error}');
                        return Container(
                          height: 320,
                          child: Center(child: Text('Error loading PDF')),
                        );
                      } else {
                        return Column(
                          children: [
                            GestureDetector(
                              onHorizontalDragEnd: (details) {
                                if (details.velocity.pixelsPerSecond.dx < 0) {
                                  // Swiped left
                                  _navigateToOtherPage(context);
                                }
                              },
                              child: Container(
                                height: 320,
                                child: PDFView(
                                  filePath: snapshot.data!,
                                  enableSwipe: true,
                                  swipeHorizontal: true,
                                  autoSpacing: false,
                                  pageFling: false,
                                  onError: (error) {
                                    print('PDFView error: $error');
                                  },
                                  onRender: (_pages) {
                                    print(
                                        'Document rendered with $_pages pages');
                                  },
                                  onViewCreated:
                                      (PDFViewController pdfViewController) {
                                    print('PDF view created');
                                  },
                                ),
                              ),
                            ),
                          ],
                        );
                      }
                    },
                  );
                } else {
                  return Container(
                    height: 320,
                    child: Center(child: CircularProgressIndicator()),
                  );
                }
              },
            ),
            const SizedBox(height: 16),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: _buildForm(),
            ),
          ],
        ),
      ),
    );
  }

  void _navigateToOtherPage(BuildContext context) {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => PdfEditing(
          onSave: () {
            // Perform any action needed on save, like refreshing data
            print("Data saved, perform any necessary actions here.");
          },
          originRoute: '', pdfPath: '',
        ),
      ),
    );
  }

  Widget _buildForm() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildFormHeader(),
        const SizedBox(height: 8),
        _buildTextField(height: 56),
        const SizedBox(height: 12),
        _buildLabel("Date"),
        const SizedBox(height: 8),
        _buildTextField(
          height: 50,
          suffixIcon: Icons.calendar_today_rounded,
          suffixIconColor: Colors.black54,
        ),
        const SizedBox(height: 16),
        _buildLabel("Contact"),
        const SizedBox(height: 8),
        _buildTextField(height: 50),
        const SizedBox(height: 16),
        _buildLabel("Address"),
        const SizedBox(height: 8),
        _buildTextField(height: 130, expands: true, maxLines: null),
      ],
    );
  }

  Widget _buildFormHeader() {
    return const Row(
      children: [
        Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              "Please fill in the details",
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 24,
              ),
            ),
            Text(
              "PO",
              style: TextStyle(
                color: Colors.black87,
                fontSize: 24,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildLabel(String text) {
    return Text(
      text,
      style: const TextStyle(
        color: Colors.black87,
        fontSize: 24,
      ),
    );
  }

  Widget _buildTextField({
    String hintText = "",
    double height = 50,
    bool expands = false,
    int? maxLines,
    IconData? suffixIcon,
    Color? suffixIconColor,
  }) {
    return Container(
      height: height,
      child: TextField(
        // controller: TextEditingController(text: initialValue),
        expands: expands,
        maxLines: maxLines,
        decoration: InputDecoration(
          hintText: hintText,
          hintStyle: const TextStyle(
            color: Colors.black54,
            fontSize: 20,
          ),
          contentPadding: const EdgeInsets.symmetric(horizontal: 16),
          fillColor: Colors.white,
          filled: true,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: const BorderSide(color: Colors.black), // Black border
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: const BorderSide(color: Colors.black), // Black border
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: const BorderSide(color: Colors.black), // Black border
          ),
          suffixIcon: suffixIcon != null
              ? IconTheme(
                  data: IconThemeData(color: suffixIconColor),
                  child: Icon(suffixIcon),
                )
              : null,
        ),
      ),
    );
  }
}

///////////editing

// class PdfEditing extends StatefulWidget {
//   final VoidCallback onSave;

//   const PdfEditing(
//       {Key? key, required this.onSave, required String originRoute, required String pdfPath})
//       : super(key: key);

//   @override
//   State<PdfEditing> createState() => _PdfEditingState();
// }

// class _PdfEditingState extends State<PdfEditing> {
//   late Future<String> _pdfPath;
//   TextEditingController poNumberController = TextEditingController();
//   TextEditingController dateController = TextEditingController();
//   TextEditingController contactController = TextEditingController();
//   TextEditingController addressController = TextEditingController();

//   @override
//   void initState() {
//     super.initState();
//     _pdfPath = _loadPDF();
//   }

//   Future<String> _loadPDF() async {
//     final ByteData data =
//         await rootBundle.load('lib/assets/2-invoice for accouting.PDF');
//     final Directory tempDir = await getTemporaryDirectory();
//     final File tempFile = File('${tempDir.path}/sample.pdf');
//     await tempFile.writeAsBytes(data.buffer.asUint8List(), flush: true);
//     return tempFile.path;
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       backgroundColor: Colors.white,
//       appBar: AppBar(
//         leading: Icon(
//           Icons.chevron_left_rounded,
//           size: 50,
//           color: Colors.red,
//         ),
//         centerTitle: true,
//         elevation: 0,
//         backgroundColor: Colors.transparent,
//         title: Padding(
//           padding: const EdgeInsets.only(left: 80),
//           child: Row(
//             children: [
//               Image.asset(
//                 'lib/assets/Doxie_logo.png',
//                 fit: BoxFit.contain,
//                 height: 30, // Adjust the height as needed
//               ),
//               const SizedBox(
//                 width: 10,
//               ),
//               ShaderMask(
//                 shaderCallback: (Rect bounds) {
//                   return const LinearGradient(
//                     begin: Alignment.centerLeft,
//                     end: Alignment.centerRight,
//                     colors: [Colors.white, Colors.white],
//                   ).createShader(bounds);
//                 },
//                 child: const Text(
//                   'DOXIE',
//                   style: TextStyle(
//                     color: Color(0xFF0E0C0D),
//                     fontSize: 20,
//                     letterSpacing: 6,
//                     fontFamily: 'ROBOT',
//                   ),
//                 ),
//               ),
//             ],
//           ),
//         ),
//       ),
//       body: SingleChildScrollView(
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.start,
//           children: [
//             _buildHeader(),
//             const SizedBox(height: 16),
//             Padding(
//               padding: const EdgeInsets.symmetric(horizontal: 16.0),
//               child: _buildForm(),
//             ),
//           ],
//         ),
//       ),
//     );
//   }

//   Widget _buildHeader() {
//     return FutureBuilder<String>(
//       future: _pdfPath,
//       builder: (context, snapshot) {
//         if (snapshot.connectionState == ConnectionState.waiting) {
//           return Container(
//             height: 320,
//             width: double.infinity,
//             color: Colors.grey[300],
//             child: Center(child: CircularProgressIndicator()),
//           );
//         } else if (snapshot.hasError ||
//             !snapshot.hasData ||
//             snapshot.data!.isEmpty) {
//           return Container(
//             height: 320,
//             width: double.infinity,
//             color: Colors.grey[300],
//             child: Center(child: Text('Error loading PDF')),
//           );
//         } else {
//           return Container(
//             height: 320,
//             width: double.infinity,
//             child: PDFView(
//               filePath: snapshot.data!,
//               enableSwipe: true,
//               swipeHorizontal: true, // Enable horizontal swipe
//               autoSpacing: true, // Auto spacing between pages
//               pageFling: true, // Allows fling gesture to change page
//               onError: (error) {
//                 print('PDFView error: $error');
//               },
//               onRender: (_pages) {
//                 print('Document rendered with $_pages pages');
//               },
//               onViewCreated: (PDFViewController pdfViewController) {
//                 print('PDF view created');
//               },
//             ),
//           );
//         }
//       },
//     );
//   }

//   Widget _buildGradientButton() {
//     return Container(
//       decoration: BoxDecoration(
//         gradient: LinearGradient(
//           begin: Alignment.topCenter,
//           end: Alignment.bottomCenter,
//           colors: [
//             Color(0xFFFD4552), // The color #FD4552 in hexadecimal
//             Color(0xFFF5082A), // The color #F5082A in hexadecimal
//           ],
//         ),
//         borderRadius: BorderRadius.circular(6),
//       ),
//       child: ElevatedButton(
//         onPressed: () {
//           widget.onSave(); // Call the callback function on save
//           Navigator.pop(context); // Navigate back
//         },
//         style: ElevatedButton.styleFrom(
//           backgroundColor: Colors.transparent,
//           shadowColor: Colors.transparent,
//           padding: EdgeInsets.symmetric(vertical: 16),
//           shape: RoundedRectangleBorder(
//             borderRadius: BorderRadius.circular(6),
//           ),
//           elevation: 3,
//         ),
//         child: Text(
//           'Save',
//           style: TextStyle(
//             fontSize: 18,
//             color: Colors.white,
//             fontFamily: 'Lato',
//           ),
//         ),
//       ),
//     );
//   }

//   Widget _buildForm() {
//     return Column(
//       crossAxisAlignment: CrossAxisAlignment.start,
//       children: [
//         Row(
//           mainAxisAlignment: MainAxisAlignment.spaceBetween,
//           children: [
//             Expanded(
//               child: _buildFormHeader(),
//             ),
//             _buildGradientButton(),
//           ],
//         ),
//         const SizedBox(height: 8),
//         _buildTextField(
//           controller: poNumberController,
//           hintText: "Enter PO Number",
//           height: 56,
//         ),
//         const SizedBox(height: 12),
//         _buildLabel("Date"),
//         const SizedBox(height: 8),
//         _buildTextField(
//           controller: dateController,
//           hintText: "Select Date",
//           height: 50,
//           suffixIcon: Icons.calendar_today_rounded,
//           suffixIconColor: Colors.black54,
//         ),
//         const SizedBox(height: 16),
//         _buildLabel("Contact"),
//         const SizedBox(height: 8),
//         _buildTextField(
//           controller: contactController,
//           hintText: "Enter Contact",
//           height: 50,
//         ),
//         const SizedBox(height: 16),
//         _buildLabel("Address"),
//         const SizedBox(height: 8),
//         _buildTextField(
//           controller: addressController,
//           hintText: "Enter Address",
//           height: 130,
//           expands: true,
//           maxLines: null,
//         ),
//       ],
//     );
//   }

//   Widget _buildFormHeader() {
//     return const Row(
//       children: [
//         Column(
//           crossAxisAlignment: CrossAxisAlignment.start,
//           children: [
//             Text(
//               "Please fill in the details",
//               style: TextStyle(
//                 fontWeight: FontWeight.bold,
//                 fontSize: 24,
//               ),
//             ),
//             Text(
//               "PO",
//               style: TextStyle(
//                 color: Colors.black87,
//                 fontSize: 24,
//               ),
//             ),
//           ],
//         ),
//       ],
//     );
//   }

//   Widget _buildLabel(String text) {
//     return Text(
//       text,
//       style: const TextStyle(
//         color: Colors.black87,
//         fontSize: 24,
//       ),
//     );
//   }

//   Widget _buildTextField({
//     required TextEditingController controller,
//     String hintText = "",
//     double height = 50,
//     bool expands = false,
//     int? maxLines,
//     IconData? suffixIcon,
//     Color? suffixIconColor,
//   }) {
//     return Container(
//       height: height,
//       child: TextField(
//         controller: controller,
//         expands: expands,
//         maxLines: maxLines,
//         decoration: InputDecoration(
//           hintText: hintText,
//           hintStyle: const TextStyle(
//             color: Colors.black54,
//             fontSize: 20,
//           ),
//           contentPadding: const EdgeInsets.symmetric(horizontal: 16),
//           fillColor: Colors.grey[200],
//           filled: true,
//           border: OutlineInputBorder(
//             borderRadius: BorderRadius.circular(8),
//             borderSide: const BorderSide(color: Colors.black), // Black border
//           ),
//           enabledBorder: OutlineInputBorder(
//             borderRadius: BorderRadius.circular(8),
//             borderSide: const BorderSide(color: Colors.black), // Black border
//           ),
//           focusedBorder: OutlineInputBorder(
//             borderRadius: BorderRadius.circular(8),
//             borderSide: const BorderSide(color: Colors.black), // Black border
//           ),
//           suffixIcon: suffixIcon != null
//               ? IconTheme(
//                   data: IconThemeData(color: suffixIconColor),
//                   child: Icon(suffixIcon),
//                 )
//               : null,
//         ),
//       ),
//     );
//   }
// }
===================================
  children: [
        // const SizedBox(height: 8),
        _buildFormHeader(),
        // const SizedBox(height: 8),
        _buildTextField(height: 50),
        const SizedBox(height: 8),
        _buildLabel("Date"),
        // const SizedBox(height: 8),
        _buildTextField(
          height: 50,
          suffixIcon: Icons.calendar_today_rounded,
          suffixIconColor: Colors.black54,
        ),
        const SizedBox(height: 8),
        _buildLabel("Contact"),
        // const SizedBox(height: 8),
        _buildTextField(height: 50),
        const SizedBox(height: 8),
        _buildLabel("Address"),
        // const SizedBox(height: 8),
        _buildTextField(height: 130, expands: true, maxLines: null),
        const SizedBox(height: 16),
      ],

      =================================
      import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('TextField Example'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: MyCustomForm(),
        ),
      ),
    );
  }
}

class MyCustomForm extends StatefulWidget {
  @override
  _MyCustomFormState createState() => _MyCustomFormState();
}

class _MyCustomFormState extends State<MyCustomForm> {
  final _controller = TextEditingController();

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: <Widget>[
        TextField(
          controller: _controller,
          decoration: InputDecoration(
            border: OutlineInputBorder(),
            labelText: 'Enter your text',
            alignLabelWithHint: true, // Aligns the label with the hint text
          ),
          minLines: 3,
          maxLines: 3,
        ),
        SizedBox(height: 20),
        ElevatedButton(
          onPressed: () {
            print('Entered text: ${_controller.text}');
          },
          child: Text('Submit'),
        ),
      ],
    );
  }
}
==============================================
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_pdfview/flutter_pdfview.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/flutter_svg.dart';


class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter ScreenUtil Example'),
      ),
      body: PdfEditing(
        pdfPath: 'path/to/pdf',
        onSave: () {},
        originRoute: 'home',
      ),
    );
  }
}

class PdfEditing extends StatefulWidget {
  final String pdfPath;
  final VoidCallback onSave;
  final String originRoute;

  const PdfEditing({
    super.key,
    required this.pdfPath,
    required this.onSave,
    required this.originRoute,
  });

  @override
  State<PdfEditing> createState() => _PdfEditingState();
}

class _PdfEditingState extends State<PdfEditing> {
  // TextEditingController for each TextField
  TextEditingController poNumberController = TextEditingController();
  TextEditingController dateController = TextEditingController();
  TextEditingController contactController = TextEditingController();
  TextEditingController addressController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        leading: IconButton(
          icon: SvgPicture.asset(
            "lib/assets/chevron-left",
            color: Colors.red,
            width: 32.w,
            height: 32.h,
          ),
          onPressed: () {
            Navigator.pop(context); // Navigate back to previous screen
          },
        ),
        centerTitle: true,
        elevation: 0,
        backgroundColor: Colors.transparent,
        title: Padding(
          padding: EdgeInsets.only(left: 70.w),
          child: Row(
            children: [
              Image.asset(
                'lib/assets/Doxie_logo.png',
                fit: BoxFit.contain,
                height: 30.h,
              ),
              SizedBox(width: 10.w),
              ShaderMask(
                shaderCallback: (Rect bounds) {
                  return LinearGradient(
                    begin: Alignment.centerLeft,
                    end: Alignment.centerRight,
                    colors: [Colors.white, Colors.white],
                  ).createShader(bounds);
                },
                child: Text(
                  'DOXIE',
                  style: TextStyle(
                    color: Color(0xFF0E0C0D),
                    fontSize: 20.sp,
                    letterSpacing: 6,
                    fontFamily: 'ROBOT',
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildHeader(),
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 16.0.w),
              child: _buildForm(),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      height: 240.h,
      color: Colors.grey[300], // Light grey background color
      child: PDFView(
        filePath: widget.pdfPath, // Use the pdfPath passed from navigation
        enableSwipe: true,
        swipeHorizontal: true,
        autoSpacing: false,
        pageFling: false,
        onError: (error) {
          print('PDFView error: $error');
        },
        onRender: (_pages) {
          print('Document rendered with $_pages pages');
        },
        onViewCreated: (PDFViewController pdfViewController) {
          print('PDF view created');
        },
        onPageChanged: (page, total) {
          // Handle page change if needed
        },
      ),
    );
  }

  Widget _buildForm() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
      SizedBox(height: 16.h),
        _buildFormHeader(),
        SizedBox(height: 4.h),
        _buildTextField(
          hintText: "Enter the PO.NO",
          minLines: 1,
        ),
        SizedBox(height: 8.h),
        _buildLabel("Date"),
        SizedBox(height: 4.h),
        _buildTextField(
          hintText: "Enter the Date",
          suffixIcon: Icons.calendar_month,
          suffixIconColor: Colors.black54,
          minLines: 1,
        ),
        SizedBox(height: 8.h),
        _buildLabel("Contact"),
        SizedBox(height: 4.h),
        _buildTextField(
          hintText: "Enter the Contact NO",
          minLines: 1,
        ),
        SizedBox(height: 8.h),
        _buildLabel("Address"),
        SizedBox(height: 4.h),
        _buildTextField(
          hintText: "Enter the Address",
          minLines: 5,
          maxLines: 5,
        ),
        SizedBox(height: 16.h),
      ],
    );
  }

  Widget _buildFormHeader() {
    return Row(
      children: [
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                "Please fill in the details",
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 18.sp,
                ),
              ),
              Text(
                "PO",
                style: TextStyle(
                  color: Colors.black87,
                  fontSize: 18.sp,
                ),
              ),
            ],
          ),
        ),
        _buildGradientButton()
      ],
    );
  }

  Widget _buildGradientButton() {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.centerLeft,
          end: Alignment.centerRight,
          colors: [
            Color(0xFFFD4552), // The color #FD4552 in hexadecimal
            Color(0xFFF5082A), // The color #F5082A in hexadecimal
          ],
        ),
        borderRadius: BorderRadius.circular(6.r),
      ),
      child: ElevatedButton(
        onPressed: () {
          // Perform save operation
          widget.onSave(); // Call the onSave callback
          Navigator.pop(context); // Navigate back to previous screen after save
        },
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.transparent,
          shadowColor: Colors.transparent,
          padding: EdgeInsets.symmetric(vertical: 8.h, horizontal: 8.w),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(6.r),
          ),
          elevation: 3,
        ),
        child: Text(
          'Save',
          style: TextStyle(
            fontSize: 14.sp,
            color: Colors.white,
            fontFamily: 'Lato',
          ),
        ),
      ),
    );
  }

  Widget _buildLabel(String text) {
    return Text(
      text,
      style: TextStyle(
        color: Colors.black87,
        fontSize: 18.sp,
      ),
    );
  }

  Widget _buildTextField({
    required String hintText,
    int? maxLines,
    IconData? suffixIcon,
    Color? suffixIconColor,
    required int minLines,
  }) {
    return Container(
      child: TextField(
        maxLines: maxLines,
        minLines: minLines,
        decoration: InputDecoration(
          hintText: hintText,
          hintStyle: TextStyle(
            color: Colors.black54,
            fontSize: 18.sp,
          ),
          contentPadding: EdgeInsets.symmetric(
            horizontal: 16.w,
            vertical: 6.h,
          ),
          fillColor: Colors.grey[200],
          filled: true,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(6.r),
            borderSide: BorderSide(color: Colors.black), // Black border
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(6.r),
            borderSide: BorderSide(color: Colors.black), // Black border
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(6.r),
            borderSide: BorderSide(color: Colors.black), // Black border
          ),
          suffixIcon: suffixIcon != null
              ? IconTheme(
                  data: IconThemeData(color: suffixIconColor),
                  child: Icon(suffixIcon),
                )
              : null,
        ),
      ),
    );
  }
}
=======@pdfeditingg
import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:path_provider/path_provider.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter PDF and JSON Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter PDF and JSON Example'),
      ),
      body: PdfEditing(
        pdfPath: 'path/to/pdf', // Replace with actual PDF path
        onSave: () {},
        originRoute: 'home',
      ),
    );
  }
}

class PdfEditing extends StatefulWidget {
  final String pdfPath;
  final VoidCallback onSave;
  final String originRoute;

  const PdfEditing({
    Key? key,
    required this.pdfPath,
    required this.onSave,
    required this.originRoute,
  }) : super(key: key);

  @override
  _PdfEditingState createState() => _PdfEditingState();
}

class _PdfEditingState extends State<PdfEditing> {
  TextEditingController poNumberController = TextEditingController();
  TextEditingController dateController = TextEditingController();
  TextEditingController contactController = TextEditingController();
  TextEditingController addressController = TextEditingController();

  void saveDataToJsonFile() async {
    // Create an Order object from the form input
    Order order = Order(
      poNumber: poNumberController.text,
      date: dateController.text,
      contact: contactController.text,
      address: addressController.text,
    );

    try {
      // Get the device's documents directory to store the JSON file
      Directory documentsDirectory = await getApplicationDocumentsDirectory();
      String filePath = '${documentsDirectory.path}/order.json';

      // Convert Order object to JSON string
      String orderJson = jsonEncode(order.toJson());

      // Write JSON string to file
      File file = File(filePath);
      await file.writeAsString(orderJson);

      // Show success message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Data saved to order.json'),
          duration: Duration(seconds: 2),
        ),
      );
    } catch (e) {
      // Handle error gracefully
      print('Error saving data: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error saving data. Please try again.'),
          duration: Duration(seconds: 2),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        leading: IconButton(
          icon: Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
        title: Text('Edit PDF Details'),
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildPdfView(),
            Padding(
              padding: EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildLabel('PO Number'),
                  _buildTextField(
                    controller: poNumberController,
                    hintText: 'Enter the PO Number',
                  ),
                  SizedBox(height: 16.0),
                  _buildLabel('Date'),
                  _buildTextField(
                    controller: dateController,
                    hintText: 'Enter the Date',
                    suffixIcon: Icons.calendar_today,
                    suffixIconOnPressed: () {
                      // Implement date picker functionality
                    },
                  ),
                  SizedBox(height: 16.0),
                  _buildLabel('Contact'),
                  _buildTextField(
                    controller: contactController,
                    hintText: 'Enter the Contact Number',
                  ),
                  SizedBox(height: 16.0),
                  _buildLabel('Address'),
                  _buildTextField(
                    controller: addressController,
                    hintText: 'Enter the Address',
                    maxLines: 3,
                  ),
                  SizedBox(height: 24.0),
                  Center(
                    child: ElevatedButton(
                      onPressed: saveDataToJsonFile,
                      child: Text('Save'),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPdfView() {
    return Container(
      height: 300.0,
      margin: EdgeInsets.all(16.0),
      color: Colors.grey[300],
      child: Center(
        child: Text('PDF Viewer Placeholder'),
      ),
    );
  }

  Widget _buildLabel(String text) {
    return Text(
      text,
      style: TextStyle(
        fontSize: 18.0,
        fontWeight: FontWeight.bold,
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String hintText,
    int maxLines = 1,
    IconData? suffixIcon,
    VoidCallback? suffixIconOnPressed,
  }) {
    return TextField(
      controller: controller,
      maxLines: maxLines,
      decoration: InputDecoration(
        hintText: hintText,
        suffixIcon: suffixIcon != null
            ? IconButton(
                icon: Icon(suffixIcon),
                onPressed: suffixIconOnPressed,
              )
            : null,
        border: OutlineInputBorder(),
        contentPadding: EdgeInsets.symmetric(vertical: 12.0, horizontal: 16.0),
      ),
    );
  }
}

class Order {
  final String poNumber;
  final String date;
  final String contact;
  final String address;

  Order({
    required this.poNumber,
    required this.date,
    required this.contact,
    required this.address,
  });

  Map<String, dynamic> toJson() {
    return {
      'poNumber': poNumber,
      'date': date,
      'contact': contact,
      'address': address,
    };
  }

  factory Order.fromJson(Map<String, dynamic> json) {
    return Order(
      poNumber: json['poNumber'],
      date: json['date'],
      contact: json['contact'],
      address: json['address'],
    );
  }
}
